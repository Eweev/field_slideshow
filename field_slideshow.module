<?php
// $Id$

/**
 * @file
 * Implement a slideshow formatter for fields.
 */

/**
 * Implements hook_field_formatter_info().
 */
function field_slideshow_field_formatter_info() {
  $formatters = array(
    'slideshow' => array(
      'label'       => t('Slideshow'),
      'field types' => array('image', 'media'),
      'settings'    => array(
        'slideshow_image_style'       => '',
        'slideshow_link'              => '',
        'slideshow_caption'           => '',
        'slideshow_fx'                => 'fade',
        'slideshow_speed'             => '1000',
        'slideshow_timeout'           => '4000',
        'slideshow_pager'             => '',
        'slideshow_pager_image_style' => '',
        'slideshow_controls'          => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_slideshow_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element['slideshow_image_style'] = array(
    '#title'          => t('Image style'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
  );

  $element['slideshow_link'] = array(
    '#title'          => t('Link image to'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_link'],
    '#empty_option'   => t('Nothing'),
    '#options'        => array(
      'content' => t('Content'),
      'file'    => t('File'),
    ),
  );

  $element['slideshow_caption'] = array(
    '#title'          => t('Caption'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_caption'],
    '#empty_option'   => t('Nothing'),
    '#options'        => array(
      'title'   => t('Title text'),
      'alt'     => t('Alt text'),
    ),
  );

  $element['slideshow_fx'] = array(
    '#title'          => t('Transition effect'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_fx'],
    '#options'        => array(
      'blindX'      => t('blindX'),
      'blindY'      => t('blindY'),
      'blindZ'      => t('blindZ'),
      'cover'       => t('cover'),
      'curtainX'    => t('curtainX'),
      'curtainY'    => t('curtainY'),
      'fade'        => t('fade'),
      'fadeZoom'    => t('fadeZoom'),
      'growX'       => t('growX'),
      'growY'       => t('growY'),
      'scrollUp'    => t('scrollUp'),
      'scrollDown'  => t('scrollDown'),
      'scrollLeft'  => t('scrollLeft'),
      'scrollRight' => t('scrollRight'),
      'scrollHorz'  => t('scrollHorz'),
      'scrollVert'  => t('scrollVert'),
      'shuffle'     => t('shuffle'),
      'slideX'      => t('slideX'),
      'slideY'      => t('slideY'),
      'toss'        => t('toss'),
      'turnUp'      => t('turnUp'),
      'turnDown'    => t('turnDown'),
      'turnLeft'    => t('turnLeft'),
      'turnRight'   => t('turnRight'),
      'uncover'     => t('uncover'),
      'wipe'        => t('wipe'),
      'zoom'        => t('zoom'),
    ),
  );

  $element['slideshow_speed'] = array(
    '#title'          => t('Transition speed'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $settings['slideshow_speed'],
  );

  $element['slideshow_timeout'] = array(
    '#title'          => t('Timeout'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $settings['slideshow_timeout'],
    '#description'    => t('Time between transitions (ms). Enter 0 to disable automatic transitions (then, enable pager and/or controls).'),
  );

  $element['slideshow_pager'] = array(
    '#title'          => t('Pager'),
    '#type'           => 'select',
    '#options'        => array('number' => 'Slide number', 'image' => 'Image'),
    '#empty_option'   => t('None'),
    '#default_value'  => $settings['slideshow_pager'],
  );

  $element['slideshow_pager_image_style'] = array(
    '#title'          => t('Pager image style'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_pager_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][slideshow_pager]"]' => array('value' => 'image'),
      ),
    ),
  );

  $element['slideshow_controls'] = array(
    '#title'          => t('Create prev/next controls'),
    '#type'           => 'checkbox',
    '#default_value'  => $settings['slideshow_controls'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_slideshow_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['slideshow_image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['slideshow_image_style']]));
  }
  else $summary[] = t('Original image');

  $link_types = array(
    'content' => t('Linked to content'),
    'file'    => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['slideshow_link']])) {
    $summary[] = $link_types[$settings['slideshow_link']];
  }

  $caption_types = array(
    'title' => t('Title text'),
    'alt'   => t('Alt text'),
  );
  // Display this setting only if there's a caption.
  if (isset($caption_types[$settings['slideshow_caption']])) {
    $summary[] = t('Caption : @caption', array('@caption' => $caption_types[$settings['slideshow_caption']]));
  }

  $summary[] = t('Transition effect: @effect', array('@effect' => $settings['slideshow_fx']));
  $summary[] = t('Speed: @speed', array('@speed' => $settings['slideshow_speed']));
  $summary[] = t('Timeout: @timeout', array('@timeout' => $settings['slideshow_timeout']));

  switch ($settings['slideshow_pager']) {
    case 'number':
      $summary[] = t('Pager') . ': ' . t('Slide number');
    break;
    case 'image':
      $pager_image_message = t('Pager') . ': ' . t('Image') . ' (';
      if (isset($image_styles[$settings['slideshow_pager_image_style']])) {
        $pager_image_message .= t('Image style: @style', array('@style' => $image_styles[$settings['slideshow_pager_image_style']]));
      }
      else $pager_image_message .= t('Original image');
      $pager_image_message .= ')';
      $summary[] = $pager_image_message;
    break;
  }

  if ($settings['slideshow_controls']) $summary[] = t('Create prev/next controls');

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function field_slideshow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['slideshow_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['slideshow_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    $items[$delta] = (array) $item; // Media field support

    if (isset($link_file)) {
      $uri = array(
        'path'    => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $items[$delta]['path'] = isset($uri) ? $uri : '';
  }

  $element[] = array(
    '#theme'              => 'field_slideshow',
    '#items'              => $items,
    '#image_style'        => $display['settings']['slideshow_image_style'],
    '#caption'            => $display['settings']['slideshow_caption'],
    '#fx'                 => $display['settings']['slideshow_fx'],
    '#speed'              => $display['settings']['slideshow_speed'],
    '#timeout'            => $display['settings']['slideshow_timeout'],
    '#pager'              => $display['settings']['slideshow_pager'],
    '#pager_image_style'  => $display['settings']['slideshow_pager_image_style'],
    '#controls'           => $display['settings']['slideshow_controls'],
  );

  return $element;
}

/**
 * Implements hook_theme().
 */
function field_slideshow_theme() {
  return array(
    'field_slideshow' => array(
      'variables'     => array(
        'items'             => NULL,
        'image_style'       => NULL,
        'caption'           => NULL,
        'speed'             => NULL,
        'fx'                => NULL,
        'timeout'           => NULL,
        'pager'             => NULL,
        'pager_image_style' => NULL,
        'controls'          => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for a slideshow formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - items: An array of images fields.
 *   - image_style: An optional image style.
 *
 * @ingroup themeable
 */
function theme_field_slideshow($variables) {
  // Generate slides
  $field_slideshow_zebra = 'odd';
  $slides_max_width = 0;
  $slides_max_height = 0;
  $slides_output = '';
  foreach ($variables['items'] as $item) {
    $classes = array('field-slideshow-slide');
    $field_slideshow_zebra = ($field_slideshow_zebra == 'odd') ? 'even' : 'odd';
    $classes[] = $field_slideshow_zebra;
    if ($num == 0) $classes[] = 'first';
    elseif ($num == count($variables['items']) - 1) $classes[] = 'last';
    $slides_output .= '<div class="' . implode(' ', $classes) . '"' . ($num != 0 ? ' style="display:none;"' : '') . '>';

    // Generate the image html
    $image = array(
      'path' => $item['uri'],
      'alt' => $item['alt'],
    );
    if (drupal_strlen($item['title']) > 0) {
      $image['title'] = $item['title'];
    }
    if ($variables['image_style']) {
      $image['style_name'] = $variables['image_style'];
      $image_output = theme('image_style', $image);
    }
    else {
      $image_output = theme('image', $image);
    }

    // Get image sizes and add them the img tag, so height is correctly calctulated by Cycle
    if ($variables['image_style']) {
      $image_path = image_style_path($variables['image_style'], $image['path']);
      // if thumbnail is not generated, do it, so we can get the dimensions
      if (!file_exists($image_path)) {
        image_style_create_derivative(image_style_load($variables['image_style']), $image['path'], $image_path);
      }
    }
    else $image_path = $image['path'];
    $image_dims = getimagesize($image_path);
    $image_output = drupal_substr($image_output, 0, -2) . $image_dims[3] . ' />';
    if ($image_dims[0] > $slides_max_width) $slides_max_width = $image_dims[0];
    if ($image_dims[1] > $slides_max_height) $slides_max_height = $image_dims[1];

    // Generate the caption
    if ($variables['caption']) {
      $caption_output = '<div class="field-slideshow-caption">' . $item[$variables['caption']] . '</div>';
    }
    else $caption_output = '';

    // Add links if needed
    if ($item['path']) {
      $path = $item['path']['path'];
      $options = $item['path']['options'];
      // When displaying an image inside a link, the html option must be TRUE.
      $options['html'] = TRUE;
      $image_output = l($image_output, $path, $options);
      if ($variables['caption']) $caption_output = l($caption_output, $path, $options);
    }

    $slides_output .= $image_output . $caption_output;
    $slides_output .= '</div>'; // .fied-slideshow-slide div closed
  }

  // Generate classes
  static $field_slideshow_id = -1;
  $field_slideshow_id++;
  $classes = array('field-slideshow', 'field-slideshow-' . $field_slideshow_id, 'effect-' . $variables['fx'], 'timeout-' . $variables['timeout']);
  if ($variables['caption'] != '') $classes[] = 'caption-' . $variables['caption'];
  if ($variables['pager'] != '') $classes[] = 'with-pager';
  if ($variables['controls']) $classes[] = 'with-controls';
  $output = '<div id="field-slideshow-' . $field_slideshow_id . '-wrapper" class="field-slideshow-wrapper">
    <div class="' . implode(' ', $classes) . '" style="width:' . $slides_max_width . 'px; height:' . $slides_max_height . 'px">';
  $output .= $slides_output; // adds the slides
  $output .= "</div></div>"; // .field-slideshow & .field-slideshow-wrapper div closed

  // Add the Cycle plugin
  drupal_add_js(drupal_get_path('module', 'field_slideshow') . '/js/jquery.cycle.all.min.js');

  // Begin javascript generation
  $js = 'jQuery(window).load(function () {
    jQuery(".field-slideshow-' . $field_slideshow_id . '")';

  // Add Caption height if exists
  if ($variables['caption'] != '') $js .= '.css("padding-bottom", (jQuery(".field-slideshow-' . $field_slideshow_id . ' .field-slideshow-caption").outerHeight() + parseInt(jQuery(".field-slideshow-' . $field_slideshow_id . ' .field-slideshow-slide img").css("margin-bottom"))) + "px")';

  // Create Pager wrapper
  if ($variables['pager'] != '') {
    $js .= '.after("<' . ($variables['pager'] == 'image' ? 'ul' : 'div') . ' id=\'field-slideshow-' . $field_slideshow_id . '-pager\' class=\'field-slideshow-pager\'/>")';
  }

  // Create Controls
  if ($variables['controls']) {
    $js .= '.after("<div id=\'field-slideshow-' . $field_slideshow_id . '-controls\' class=\'field-slideshow-controls\'><a href=\'#\' class=\'prev\'>' . t('Prev') . '</a><a href=\'#\' class=\'next\'>' . t('Next') . '</a></div>")';
  }

  // Add options
  $js .= '.cycle({
    resizing  : 0,
    fx        : "' . $variables['fx'] . '",
    speed     : "' . $variables['speed'] . '",
    timeout   : ' . intval($variables['timeout']);

    if ($variables['speed'] == 0 && $variables['timeout'] == 0) $js .= ',fastOnEvent : true';

    if ($variables['pager'] != '') {
      $js .= ',pager : "#field-slideshow-' . $field_slideshow_id . '-pager"';
      if ($variables['pager'] == 'image') {
        $path_parts = explode('/', image_style_url($variables['pager_image_style'], $variables['items'][0]['uri']));
        array_pop($path_parts);
        $path = implode('/', $path_parts) . '/';
        $js .= ',pagerAnchorBuilder: function(idx, slide) { ' .
          "filename = jQuery(slide).find('img')[0].src.split('/').pop(); " .
          "src = '" . $path . "' + filename; " .
          'return ' . "'" . '<li><a href="#"><img src="' . "' + src + '" . '" /></a></li>' . "'" . '; }';
      }
    }

    if ($variables['controls']) $js .= ',prev : "#field-slideshow-' . $field_slideshow_id . '-controls .prev",next : "#field-slideshow-' . $field_slideshow_id . '-controls .next"';

  $js .= '}); });';
  drupal_add_js($js, 'inline');

  drupal_add_css(drupal_get_path('module', 'field_slideshow') . '/field_slideshow.css');

  return $output;
}