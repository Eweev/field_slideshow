<?php
// $Id$

/**
 * @file
 * Implement a slideshow formatter for fields.
 */

/**
 * Implements hook_field_formatter_info().
 */
function field_slideshow_field_formatter_info() {
  $formatters = array(
    'slideshow' => array(
      'label'       => t('Slideshow'),
      'field types' => array('image', 'media'),
      'settings'    => array(
        'slideshow_image_style'   => '',
        'slideshow_link'          => '',
        'slideshow_caption'       => '',
        'slideshow_fx'            => 'fade',
        'slideshow_timeout'       => '4000',
        'slideshow_pager'         => '',
        'slideshow_controls'      => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_slideshow_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element['slideshow_image_style'] = array(
    '#title'          => t('Image style'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
  );

  $element['slideshow_link'] = array(
    '#title'          => t('Link image to'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_link'],
    '#empty_option'   => t('Nothing'),
    '#options'        => array(
      'content' => t('Content'),
      'file'    => t('File'),
    ),
  );

  $element['slideshow_caption'] = array(
    '#title'          => t('Caption'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_caption'],
    '#empty_option'   => t('Nothing'),
    '#options'        => array(
      'title'   => t('Title text'),
      'alt'     => t('Alt text'),
    ),
  );

  $element['slideshow_fx'] = array(
    '#title'          => t('Transition effect'),
    '#type'           => 'select',
    '#default_value'  => $settings['slideshow_fx'],
    '#options'        => array(
      'blindX'      => t('blindX'),
      'blindY'      => t('blindY'),
      'blindZ'      => t('blindZ'),
      'cover'       => t('cover'),
      'curtainX'    => t('curtainX'),
      'curtainY'    => t('curtainY'),
      'fade'        => t('fade'),
      'fadeZoom'    => t('fadeZoom'),
      'growX'       => t('growX'),
      'growY'       => t('growY'),
      'scrollUp'    => t('scrollUp'),
      'scrollDown'  => t('scrollDown'),
      'scrollLeft'  => t('scrollLeft'),
      'scrollRight' => t('scrollRight'),
      'scrollHorz'  => t('scrollHorz'),
      'scrollVert'  => t('scrollVert'),
      'shuffle'     => t('shuffle'),
      'slideX'      => t('slideX'),
      'slideY'      => t('slideY'),
      'toss'        => t('toss'),
      'turnUp'      => t('turnUp'),
      'turnDown'    => t('turnDown'),
      'turnLeft'    => t('turnLeft'),
      'turnRight'   => t('turnRight'),
      'uncover'     => t('uncover'),
      'wipe'        => t('wipe'),
      'zoom'        => t('zoom'),
    ),
  );

  $element['slideshow_timeout'] = array(
    '#title'          => t('Timeout'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $settings['slideshow_timeout'],
    '#description'    => t('Time between transitions (ms). Enter 0 to disable automatic transitions (then, enable pager and/or controls).'),
  );

  $element['slideshow_pager'] = array(
    '#title'          => t('Create pager'),
    '#type'           => 'checkbox',
    '#default_value'  => $settings['slideshow_pager'],
  );

  $element['slideshow_controls'] = array(
    '#title'          => t('Create prev/next controls'),
    '#type'           => 'checkbox',
    '#default_value'  => $settings['slideshow_controls'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_slideshow_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['slideshow_image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['slideshow_image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file'    => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['slideshow_link']])) {
    $summary[] = $link_types[$settings['slideshow_link']];
  }

  $caption_types = array(
    'title' => t('Title text'),
    'alt'   => t('Alt text'),
  );
  // Display this setting only if there's a caption.
  if (isset($caption_types[$settings['slideshow_caption']])) {
    $summary[] = t('Caption : @caption', array('@caption' => $caption_types[$settings['slideshow_caption']]));
  }

  $summary[] = t('Transition effect : @effect', array('@effect' => $settings['slideshow_fx']));
  $summary[] = t('Timeout : @timeout', array('@timeout' => $settings['slideshow_timeout']));
  if ($settings['slideshow_pager']) $summary[] = t('Create pager');
  if ($settings['slideshow_controls']) $summary[] = t('Create prev/next controls');

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function field_slideshow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['slideshow_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['slideshow_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path'    => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $items[$delta]['path'] = isset($uri) ? $uri : '';
  }

  $element[] = array(
    '#theme'        => 'field_slideshow',
    '#items'        => $items,
    '#image_style'  => $display['settings']['slideshow_image_style'],
    '#caption'      => $display['settings']['slideshow_caption'],
    '#fx'           => $display['settings']['slideshow_fx'],
    '#timeout'      => $display['settings']['slideshow_timeout'],
    '#pager'        => $display['settings']['slideshow_pager'],
    '#controls'     => $display['settings']['slideshow_controls'],
  );

  return $element;
}

/**
 * Implements hook_theme().
 */
function field_slideshow_theme() {
  return array(
    'field_slideshow' => array(
      'variables'     => array(
        'items'       => NULL,
        'image_style' => NULL,
        'caption'     => NULL,
        'fx'          => NULL,
        'timeout'     => NULL,
        'pager'       => NULL,
        'controls'    => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for a slideshow formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - items: An array of images fields.
 *   - image_style: An optional image style.
 *
 * @ingroup themeable
 */
function theme_field_slideshow($variables) {
  // Generate classes
  static $field_slideshow_id = -1;
  $field_slideshow_id++;
  $classes = array('field-slideshow', 'field-slideshow-' . $field_slideshow_id, 'effect-' . $variables['fx'], 'timeout-' . $variables['timeout']);
  if ($variables['caption']) $classes[] = 'caption-' . $variables['caption'];
  if ($variables['pager']) $classes[] = 'with-pager';
  if ($variables['controls']) $classes[] = 'with-controls';
  $output = '<div id="field-slideshow-' . $field_slideshow_id . '-wrapper" class="field-slideshow-wrapper">
    <div class="' . implode(' ', $classes) . '">';

  // Generate slides
  $field_slideshow_zebra = 'odd';
  foreach ($variables['items'] as $item) {
    $field_slideshow_zebra = ($field_slideshow_zebra == 'odd') ? 'even' : 'odd';
    $output .= '<div class="field-slideshow-slide ' . $field_slideshow_zebra . '">';

    // Generate the image html
    $image = array(
      'path' => $item['uri'],
      'alt' => $item['alt'],
    );
    if (drupal_strlen($item['title']) > 0) {
      $image['title'] = $item['title'];
    }
    if ($variables['image_style']) {
      $image['style_name'] = $variables['image_style'];
      $image_output = theme('image_style', $image);
    }
    else {
      $image_output = theme('image', $image);
    }
    // Get image sizes and add them the img tag, so height is correctly calctulated by Cycle
    preg_match('/\bsrc=".*\/files\/(.*)" \b/', $image_output, $matches);
    if (file_exists('public://' . $matches[1])) {
      $image_dims = getimagesize('public://' . $matches[1]);
      $image_output = drupal_substr($image_output, 0, -2) . $image_dims[3] . ' />';
    }

    // Generate the caption
    if ($variables['caption']) {
      $caption_output = '<div class="field-slideshow-caption">' . $item[$variables['caption']] . '</div>';
    }
    else $caption_output = '';

    // Add links if needed
    if ($item['path']) {
      $path = $item['path']['path'];
      $options = $item['path']['options'];
      // When displaying an image inside a link, the html option must be TRUE.
      $options['html'] = TRUE;
      $image_output = l($image_output, $path, $options);
      if ($variables['caption']) $caption_output = l($caption_output, $path, $options);
    }

    $output .= $image_output . $caption_output;
    $output .= '</div>'; // .fied-slideshow-slide div closed
  }

  $output .= "</div></div>"; // .field-slideshow & .field-slideshow-wrapper div closed

  // Add the Cycle plugin
  drupal_add_js(drupal_get_path('module', 'field_slideshow') . '/js/jquery.cycle.all.min.js');

  // Generate javascript
  $js = 'jQuery(document).ready(function () {
    jQuery(".field-slideshow-' . $field_slideshow_id . '")';
  if ($variables['pager']) {
    $js .= '.after("<div id=\'field-slideshow-' . $field_slideshow_id . '-pager\' class=\'field-slideshow-pager\'/>")';
  }
  if ($variables['controls']) {
    $js .= '.after("<div id=\'field-slideshow-' . $field_slideshow_id . '-controls\' class=\'field-slideshow-controls\'><a href=\'#\' class=\'prev\'>' . t('Prev') . '</a><a href=\'#\' class=\'next\'>' . t('Next') . '</a></div>")';
  }
  $js .= '.cycle({
    fx      : "' . $variables['fx'] . '",
    timeout : ' . intval($variables['timeout']) .'
    ' . ($variables['pager'] ? ',pager : "#field-slideshow-' . $field_slideshow_id . '-pager"' : '') . '
    ' . ($variables['controls'] ? ',prev : "#field-slideshow-' . $field_slideshow_id . '-controls .prev"' : '') . '
    ' . ($variables['controls'] ? ',next : "#field-slideshow-' . $field_slideshow_id . '-controls .next"' : '') . '
  }); });';
  drupal_add_js($js, 'inline');

  return $output;
}